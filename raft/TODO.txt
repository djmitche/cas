## Next

* Implement user state machine using a trait
  - execute within update_commitment, include output in action to send reply to client
  - trait DistributedState<Event=..>
    - RaftState:
      distributed_state: DS,
    - LogEntry<(RequestId, DS::Event)>??

## Doc

* doc deviations from paper
  * AppendEntriesRep contains info implicitly in the context of the RPC (next_index)

## Misc

* Handle message ser/de somewhere better

## Server

 * several more methods need tests (TODO: test)

## crate::net::tcp

* Expire outgoing messages if not sent in 500 ms or whatever
* Write messages while still monitoring for stopping
* use either net2 or nix, not both
* Figure out how to do a nonblocking connect with a socket from net2
* Make the wait state back off up to 1000ms or something
